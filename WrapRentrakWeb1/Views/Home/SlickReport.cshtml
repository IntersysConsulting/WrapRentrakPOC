<link href="@Url.Content("~/css/slick.grid.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/controls/slick.pager.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/css/smoothness/jquery-ui-1.8.16.custom.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/css/examples.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/controls/slick.columnpicker.css")" rel="stylesheet" type="text/css" />

<style>
    .cell-title {
        font-weight: bold;
    }

    .cell-effort-driven {
        text-align: center;
    }

    .cell-selection {
        border-right-color: silver;
        border-right-style: solid;
        background: #808080;
        color: aqua;
        text-align: right;
        font-size: 10px;
    }

    .slick-row.selected .cell-selection {
        background-color: transparent; /* show default selected row background */
    }
</style>
@*<div id="reportGrid"></div>*@
@*<table width="100%">
    <tr>
        <td valign="top" width="50%">
            <div id="reportGrid" style="width:800px;height:800px;"></div>
        </td>
    </tr>
</table>*@

@*<script src="@Url.Content("~/js/slick.core.js")" type="text/javascript"></script>
<script src="@Url.Content("~/js/slick.grid.js")" type="text/javascript"></script>
<script src="@Url.Content("~/js/SlickGrid.js")" type="text/javascript"></script>*@


<div style="position:relative">
    <div style="width:1750px;">
        <div class="grid-header" style="width:100%">
            <label>Single Market Grid Report</label>
            <span style="float:right" class="ui-icon ui-icon-search" title="Toggle search panel"
                  onclick="toggleFilterRow()"></span>
        </div>
        <div id="myGrid" style="width:100%;height:850px;"></div>
        <div id="pager" style="width:100%;height:20px;"></div>
    </div>

    @*<div class="options-panel">
        <b>Search:</b>
        <hr />
        <div style="padding:6px;">
            <label style="width:200px;float:left">Show tasks with % at least: </label>

            <div style="padding:2px;">
                <div style="width:100px;display:inline-block;" id="pcSlider"></div>
            </div>
            <br />
            <label style="width:200px;float:left">And title including:</label>
            <input type=text id="txtSearch" style="width:100px;">
            <br /><br />
            <button id="btnSelectRows">Select first 10 rows</button>

            <br />

            
            
        </div>
    </div>*@
</div>

<div id="inlineFilterPanel" style="display:none;background:#dddddd;padding:3px;color:black;">
    Show tasks with title including <input type="text" id="txtSearch2">
    and % at least &nbsp;
    <div style="width:100px;display:inline-block;" id="pcSlider2"></div>
</div>

<script src="@Url.Content("~/js/firebugx.js")"></script>

<script src="@Url.Content("~/js/jquery-1.7.min.js")"></script>
<script src="@Url.Content("~/js/jquery-ui-1.8.16.custom.min.js")"></script>
<script src="@Url.Content("~/js/jquery.event.drag-2.2.js")"></script>

<script src="@Url.Content("~/js/slick.core.js")"></script>
<script src="@Url.Content("~/js/slick.formatters.js")"></script>
<script src="@Url.Content("~/js/slick.editors.js")"></script>
<script src="@Url.Content("~/plugins/slick.rowselectionmodel.js")"></script>
<script src="@Url.Content("~/js/slick.grid.js")"></script>
<script src="@Url.Content("~/js/slick.dataview.js")"></script>
<script src="@Url.Content("~/controls/slick.pager.js")"></script>
<script src="@Url.Content("~/controls/slick.columnpicker.js")"></script>

<script>
    var dataView;
    var grid;
    var data = [];
    var columns = [
      { id: "id", name: "id", field: "id", width: 120, minWidth: 60, cssClass: "cell-title", sortable: true },
      { id: "market", name: "Market", field: "MarketName", width: 250, minWidth: 120, cssClass: "cell-title", sortable: true },
      { id: "date", name: "Date", field: "qhDateTime", sortable: true, width: 80, sortable: true },
      { id: "ht", defaultSortAsc: false, name: "HT", field: "putHutDuring15Minutes", width: 80, resizable: false, sortable: true },
      { id: "station", name: "Station", field: "rentrakStationName", minWidth: 250, sortable: true },
      { id: "episode", name: "Episode", field: "rentrakEpisodeTitle", minWidth: 250, sortable: true },
      { id: "series", name: "Series", field: "rentrakSeriesName", minWidth: 250, sortable: true },
      { id: "income", name: "Income", field: "rentrakDemoName", minWidth: 250, sortable: true },
      { id: "rt", name: "RT", field: "ratingDuring15Minutes", width: 80, minWidth: 20, maxWidth: 60, sortable: true },
      { id: "sh", name: "SH", field: "shareDuring15Minutes", width: 60, minWidth: 120, cssClass: "cell-title", sortable: true }
    ];
    var options = {
        editable: false,
        enableAddRow: false,
        enableCellNavigation: true,
        asyncEditorLoading: false,
        forceFitColumns: false,
        topPanelHeight: 50
    };
    var sortcol = "episode";
    var sortdir = 1;
    var percentCompleteThreshold = 0;
    var searchString = "";
    function requiredFieldValidator(value) {
        if (value == null || value == undefined || !value.length) {
            return { valid: false, msg: "This is a required field" };
        }
        else {
            return { valid: true, msg: null };
        }
    }
    function myFilter(item, args) {
        if (item["rt"] < args.percentCompleteThreshold) {
            return false;
        }
        if (args.searchString != "" && item["episode"].indexOf(args.searchString) == -1) {
            return false;
        }
        return true;
    }
    function percentCompleteSort(a, b) {
        return a["rt"] - b["rt"];
    }
    function comparer(a, b) {
        var x = a[sortcol], y = b[sortcol];
        return (x == y ? 0 : (x > y ? 1 : -1));
    }
    function toggleFilterRow() {
        grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
    }
    $(".grid-header .ui-icon")
            .addClass("ui-state-default ui-corner-all")
            .mouseover(function (e) {
                $(e.target).addClass("ui-state-hover")
            })
            .mouseout(function (e) {
                $(e.target).removeClass("ui-state-hover")
            });
    $(function () {
       
        dataView = new Slick.Data.DataView({ inlineFilters: true });
        grid = new Slick.Grid("#myGrid", dataView, columns, options);
        grid.setSelectionModel(new Slick.RowSelectionModel());

        var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
        var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options);
        // move the filter panel defined in a hidden div into grid top panel
        $("#inlineFilterPanel")
            .appendTo(grid.getTopPanel())
            .show();
       
        grid.onKeyDown.subscribe(function (e) {
            // select all rows on ctrl-a
            if (e.which != 65 || !e.ctrlKey) {
                return false;
            }
            var rows = [];
            for (var i = 0; i < dataView.getLength() ; i++) {
                rows.push(i);
            }
            grid.setSelectedRows(rows);
            e.preventDefault();
        });
        grid.onSort.subscribe(function (e, args) {
            sortdir = args.sortAsc ? 1 : -1;
            sortcol = args.sortCol.field;
                // using native sort with comparer
                // preferred method but can be very slow in IE with huge datasets
                dataView.sort(comparer, args.sortAsc);
        });
        // wire up model events to drive the grid
        dataView.onRowCountChanged.subscribe(function (e, args) {
            grid.updateRowCount();
            grid.render();
        });
        dataView.onRowsChanged.subscribe(function (e, args) {
            grid.invalidateRows(args.rows);
            grid.render();
        });
        dataView.onPagingInfoChanged.subscribe(function (e, pagingInfo) {
            var isLastPage = pagingInfo.pageNum == pagingInfo.totalPages - 1;
            var enableAddRow = isLastPage || pagingInfo.pageSize == 0;
            var options = grid.getOptions();
            if (options.enableAddRow != enableAddRow) {
                grid.setOptions({ enableAddRow: enableAddRow });
            }
        });
        
        var h_runfilters = null;
        // wire up the slider to apply the filter to the model
        $("#pcSlider,#pcSlider2").slider({
            "range": "min",
            "slide": function (event, ui) {
                Slick.GlobalEditorLock.cancelCurrentEdit();
                if (percentCompleteThreshold != ui.value) {
                    window.clearTimeout(h_runfilters);
                    h_runfilters = window.setTimeout(updateFilter, 10);
                    percentCompleteThreshold = ui.value;
                }
            }
        });
        // wire up the search textbox to apply the filter to the model
        $("#txtSearch,#txtSearch2").keyup(function (e) {
            Slick.GlobalEditorLock.cancelCurrentEdit();
            // clear on Esc
            if (e.which == 27) {
                this.value = "";
            }
            searchString = this.value;
            updateFilter();
        });
        function updateFilter() {
            dataView.setFilterArgs({
                percentCompleteThreshold: percentCompleteThreshold,
                searchString: searchString
            });
            dataView.refresh();
        }
        $("#btnSelectRows").click(function () {
            if (!Slick.GlobalEditorLock.commitCurrentEdit()) {
                return;
            }
            var rows = [];
            for (var i = 0; i < 10 && i < dataView.getLength() ; i++) {
                rows.push(i);
            }
            grid.setSelectedRows(rows);
        });
        // initialize the model after all the events have been hooked up
        $.getJSON('/Home/SingleDayGridSlick', function (data) {
            dataView.beginUpdate();
            dataView.setItems(data);
            dataView.setFilterArgs({
                percentCompleteThreshold: percentCompleteThreshold,
                searchString: searchString
            });
            dataView.setFilter(myFilter);
            dataView.endUpdate();
        });
        
        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);
        $("#gridContainer").resizable();
    })
</script>

